// <auto-generated: FinalDeltaPro v4>
using System.Reflection;
using System.Threading.RateLimiting;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.EntityFrameworkCore;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using SubscriptionManagement.Infrastructure.Persistence;
using SubscriptionManagement.WebAPI.Middleware;

var builder = WebApplication.CreateBuilder(args);

// ===== Core services =====
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// ===== Production-grade wiring =====

// Health checks
builder.Services.AddHealthChecks();

// API Versioning
builder.Services.AddApiVersioning(options =>
{
    options.DefaultApiVersion = new ApiVersion(1, 0);
    options.AssumeDefaultVersionWhenUnspecified = true;
    options.ReportApiVersions = true;
    options.ApiVersionReader = new UrlSegmentApiVersionReader();
});
builder.Services.AddVersionedApiExplorer(setup => {
    setup.GroupNameFormat = "'v'VVV";
    setup.SubstituteApiVersionInUrl = true;
});

// ProblemDetails + GlobalExceptionHandler
builder.Services.AddProblemDetails();
builder.Services.AddExceptionHandler<GlobalExceptionHandler>();

// CORS
builder.Services.AddCors(p => p.AddPolicy("Default",
    b => b.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()
          .WithExposedHeaders("X-Correlation-ID","X-RateLimit-Limit","X-RateLimit-Remaining")
));

// Rate Limiter (per-IP sliding window)
builder.Services.AddRateLimiter(options =>
{
    options.RejectionStatusCode = StatusCodes.Status429TooManyRequests;
    options.GlobalLimiter = PartitionedRateLimiter.Create<HttpContext, string>(ctx =>
    {
        var key = ctx.Connection.RemoteIpAddress?.ToString() ?? "unknown";
        return RateLimitPartition.GetSlidingWindowLimiter(key, _ => new SlidingWindowRateLimiterOptions
        {
            PermitLimit = 200,
            Window = TimeSpan.FromMinutes(1),
            SegmentsPerWindow = 4,
            QueueProcessingOrder = QueueProcessingOrder.OldestFirst,
            QueueLimit = 50
        });
    });
});

// OpenTelemetry (keep lightweight)
builder.Services.AddOpenTelemetry()
    .ConfigureResource(r => r.AddService(
        serviceName: builder.Environment.ApplicationName,
        serviceVersion: Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "1.0.0"))
    .WithTracing(t => t
        .AddAspNetCoreInstrumentation(o => o.RecordException = true)
        .AddHttpClientInstrumentation())
    .WithMetrics(m => m
        .AddAspNetCoreInstrumentation()
        .AddHttpClientInstrumentation()
        .AddRuntimeInstrumentation()
        .AddProcessInstrumentation()
        .AddPrometheusExporter());

// ===== Operational additions: Idempotency + Outbox + OIDC (optional) =====
var defaultConn = builder.Configuration.GetConnectionString("Default")
                 ?? builder.Configuration.GetConnectionString("Postgres")
                 ?? "Host=localhost;Port=5432;Database=subscriptiondb;Username=dev;Password=dev";

builder.Services.AddDbContext<OperationalDbContext>(o => o.UseNpgsql(defaultConn));
builder.Services.AddScoped<IIdempotencyStore, EfIdempotencyStore>();
builder.Services.AddScoped<IOutbox, EfOutbox>();
builder.Services.AddHostedService<OutboxProcessor>();

// OIDC if configured (Keycloak/Duende), otherwise keep your dev auth
var oidcAuthority = builder.Configuration["OIDC:Authority"];
var oidcAudience  = builder.Configuration["OIDC:Audience"];
if (!string.IsNullOrWhiteSpace(oidcAuthority))
{
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, o =>
        {
            o.Authority = oidcAuthority;
            o.Audience  = oidcAudience;
            o.RequireHttpsMetadata = false;
        });
    builder.Services.AddAuthorization(opt =>
    {
        opt.AddPolicy("SubscriptionsWrite", p => p.RequireClaim("scope", "subscriptions:write"));
    });
}

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Exception handler (ProblemDetails)
app.UseExceptionHandler();

// Must be early in pipeline
app.UseMiddleware<CorrelationIdMiddleware>();
app.UseMiddleware<SecurityHeadersMiddleware>();

app.UseRateLimiter();
app.UseCors("Default");

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();
app.MapHealthChecks("/health");
app.MapPrometheusScrapingEndpoint();

app.Run();
