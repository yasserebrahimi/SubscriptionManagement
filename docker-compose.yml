version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: subscription-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: subscriptiondb
      POSTGRES_USER: ${DB_USER:-dev}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports: [ "5432:5432" ]
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [ subscription-network ]

  subscription-webapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: subscription-webapi
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: subscriptiondb
      DB_USER: ${DB_USER:-dev}
      DB_PASSWORD: ${DB_PASSWORD:?Database password required}
    ports: [ "8080:8080" ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks: [ subscription-network ]

  redis:
    image: redis:7-alpine
    container_name: subscription-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
    ports: [ "6379:6379" ]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [ subscription-network ]

  jaeger:
    image: jaegertracing/all-in-one:1.56
    container_name: subscription-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    networks: [ subscription-network ]

networks:
  subscription-network: { driver: bridge }

volumes:
  postgres-data: { driver: local }
  redis-data: { driver: local }
